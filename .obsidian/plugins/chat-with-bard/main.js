/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BardPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// components/ChatModal.ts
var import_obsidian3 = require("obsidian");

// components/BardConnection.ts
var import_obsidian = require("obsidian");
var querystring = __toESM(require("querystring"));
var _bard_token, _bard_token_2, _bard_tokne_3, _reqid, _snim0e, _conversationID, _responseID, _choiceId, _fSid, _bl;
var _Bard = class {
  constructor(bard_token, bard_token_2, bard_token_3) {
    __privateAdd(this, _bard_token, void 0);
    __privateAdd(this, _bard_token_2, void 0);
    //__Secure-1PSIDCC
    __privateAdd(this, _bard_tokne_3, void 0);
    //__Secure-1PSIDTS
    __privateAdd(this, _reqid, void 0);
    __privateAdd(this, _snim0e, void 0);
    __privateAdd(this, _conversationID, void 0);
    __privateAdd(this, _responseID, void 0);
    __privateAdd(this, _choiceId, void 0);
    __privateAdd(this, _fSid, void 0);
    __privateAdd(this, _bl, void 0);
    __privateSet(this, _bard_token, bard_token);
    __privateSet(this, _bard_token_2, bard_token_2);
    __privateSet(this, _bard_tokne_3, bard_token_3);
    __privateSet(this, _reqid, Math.round(Math.random() * 9999));
    __privateSet(this, _conversationID, "");
    __privateSet(this, _responseID, "");
    __privateSet(this, _choiceId, "");
  }
  async deleteConversation(conversationID) {
    const input_text_struct = [
      [["GzXR5e", `["${conversationID}", 10]`, null, "generic"]]
    ];
    const data = {
      "f.req": JSON.stringify(input_text_struct),
      "at": __privateGet(this, _snim0e)
    };
    await this.makeRequest("post", "https://bard.google.com/_/BardChatUi/data/batchexecute?", "GzXR5e", data, "/chat");
  }
  async getConversation(conversationID) {
    const input_text_struct = [
      [["hNvQHb", `["${conversationID}", 10]`, null, "generic"]]
    ];
    const data = {
      "f.req": JSON.stringify(input_text_struct),
      "at": __privateGet(this, _snim0e)
    };
    let jsons = await this.makeRequest("post", "https://bard.google.com/_/BardChatUi/data/batchexecute?", "hNvQHb", data, "/chat/" + conversationID);
    var result = new Array();
    jsons[0].forEach((element) => {
      let userMessage = element[2][0][0];
      let botResponse = "Bot response";
      let responseId = "";
      let choiceId = "";
      for (let index = 0; index < element[3][0].length; index++) {
        if (element[3][0][index][0] == element[3][3]) {
          botResponse = element[3][0][index][1][0];
          choiceId = element[3][3];
        }
      }
      responseId = element[0][1];
      result.unshift({ "UserMessage": userMessage, "BotResponse": botResponse, "responseID": responseId, "choiceId": choiceId });
    });
    return result;
  }
  async getConversations() {
    const input_text_struct = [
      [["MaZiqc", "[13,null,[0]]", null, "generic"]]
    ];
    const data = {
      "f.req": JSON.stringify(input_text_struct),
      "at": __privateGet(this, _snim0e)
    };
    let jsons = await this.makeRequest("post", "https://bard.google.com/_/BardChatUi/data/batchexecute?", "MaZiqc", data, "/chat");
    return jsons[0];
  }
  async getResponse(query) {
    const input_text_struct = [
      [query, 0, null, [], null, null, 0],
      null,
      [__privateGet(this, _conversationID), __privateGet(this, _responseID), __privateGet(this, _choiceId)]
      /*, null, null, []],
      null, null, null, [1], 0, [], [], 1, 0,*/
    ];
    const data = {
      "f.req": JSON.stringify([null, JSON.stringify(input_text_struct)]),
      "at": __privateGet(this, _snim0e)
    };
    let jsons = await this.makeRequest("post", "https://bard.google.com/_/BardChatUi/data/assistant.lamda.BardFrontendService/StreamGenerate?", "", data, "");
    __privateSet(this, _conversationID, jsons[1][0]);
    __privateSet(this, _responseID, jsons[1][1]);
    __privateSet(this, _choiceId, jsons[4][0][0]);
    return jsons[4][0][1][0];
  }
  async makeRequest(method, url, rpcids, data, path) {
    let params = {
      "_reqid": __privateGet(this, _reqid),
      "bl": __privateGet(this, _bl),
      "f.sid": __privateGet(this, _fSid),
      "source-path": path,
      "rt": "c",
      "rpcids": rpcids
    };
    const requestParams = {
      url: url + querystring.stringify(params),
      method,
      throw: true,
      body: new URLSearchParams(data).toString(),
      contentType: "application/x-www-form-urlencoded;charset=UTF-8",
      headers: {
        "Cookie": this.getCookies()
      }
    };
    let resp = await (0, import_obsidian.request)(requestParams);
    __privateSet(this, _reqid, __privateGet(this, _reqid) + 1e5);
    let lines = resp.split("\n").filter((line) => line.startsWith('[["wrb.fr'));
    return lines.map((line) => JSON.parse(JSON.parse(line)[0][2]))[0];
  }
  getCookies() {
    let cookies = `__Secure-1PSID=${__privateGet(this, _bard_token)}`;
    if (__privateGet(this, _bard_token_2) != void 0 && __privateGet(this, _bard_token_2) != "") {
      cookies += `;__Secure-1PSIDCC=${__privateGet(this, _bard_token_2)}`;
    }
    if (__privateGet(this, _bard_tokne_3) != void 0 && __privateGet(this, _bard_tokne_3) != "") {
      cookies += `;__Secure-1PSIDTS=${__privateGet(this, _bard_tokne_3)}`;
    }
    return cookies;
  }
  async getAuthentication() {
    var _a, _b, _c;
    if (__privateGet(this, _bard_token) == null || __privateGet(this, _bard_token).charAt(__privateGet(this, _bard_token).length - 1) != ".") {
      throw new Error("__Secure-Ps1d token is either missing or incomplete");
    }
    let resp = await (0, import_obsidian.request)({
      method: "get",
      url: "https://bard.google.com/",
      headers: {
        "Cookie": this.getCookies()
      }
    });
    var regex = /"SNlM0e":"(.*?)"/;
    const sn1m0e = (_a = resp.match(regex)) == null ? void 0 : _a[1];
    regex = /"FdrFJe":"(.*?)"/;
    const fsid = (_b = resp.match(regex)) == null ? void 0 : _b[1];
    regex = /"cfb2h":"(.*?)"/;
    const bl = (_c = resp.match(regex)) == null ? void 0 : _c[1];
    if (sn1m0e == null) {
      throw new Error("Unable to get the snim0e token");
    } else if (fsid == null) {
      throw new Error("Unable to get the f.sid token");
    } else if (bl == null) {
      throw new Error("Unable to get the bl token");
    } else {
      __privateSet(this, _snim0e, sn1m0e);
      __privateSet(this, _fSid, fsid);
      __privateSet(this, _bl, bl);
    }
  }
  static async getBard(bard_token, bard_token_2, bard_token_3) {
    let bard = new _Bard(bard_token, bard_token_2, bard_token_3);
    try {
      await bard.getAuthentication();
      return bard;
    } catch (error) {
      console.error(error);
      new import_obsidian.Notice(error);
    }
  }
  setConversationId(conversationID) {
    __privateSet(this, _conversationID, conversationID);
  }
  setResponseId(responseID) {
    __privateSet(this, _responseID, responseID);
  }
  setChoiceId(choiceID) {
    __privateSet(this, _choiceId, choiceID);
  }
};
var Bard = _Bard;
_bard_token = new WeakMap();
_bard_token_2 = new WeakMap();
_bard_tokne_3 = new WeakMap();
_reqid = new WeakMap();
_snim0e = new WeakMap();
_conversationID = new WeakMap();
_responseID = new WeakMap();
_choiceId = new WeakMap();
_fSid = new WeakMap();
_bl = new WeakMap();

// components/DebugBard.ts
var import_obsidian2 = require("obsidian");
var querystring2 = __toESM(require("querystring"));
var _bard_token2, _bard_token_22, _bard_tokne_32, _reqid2, _snim0e2, _conversationID2, _responseID2, _choiceId2, _fSid2, _bl2;
var _DebugBard = class extends Bard {
  constructor(bard_token, bard_token_2, bard_token_3) {
    super(bard_token, bard_token_2, bard_token_3);
    __privateAdd(this, _bard_token2, void 0);
    __privateAdd(this, _bard_token_22, void 0);
    //__Secure-1PSIDCC
    __privateAdd(this, _bard_tokne_32, void 0);
    //__Secure-1PSIDTS
    __privateAdd(this, _reqid2, void 0);
    __privateAdd(this, _snim0e2, void 0);
    __privateAdd(this, _conversationID2, void 0);
    __privateAdd(this, _responseID2, void 0);
    __privateAdd(this, _choiceId2, void 0);
    __privateAdd(this, _fSid2, void 0);
    __privateAdd(this, _bl2, void 0);
    __privateSet(this, _bard_token2, bard_token);
    __privateSet(this, _bard_token_22, bard_token_2);
    __privateSet(this, _bard_tokne_32, bard_token_3);
    __privateSet(this, _reqid2, Math.round(Math.random() * 9999));
    __privateSet(this, _conversationID2, "");
    __privateSet(this, _responseID2, "");
    __privateSet(this, _choiceId2, "");
  }
  async deleteConversation(conversationID) {
    console.log("DEBUG BARD: Deleting conversation " + conversationID);
  }
  async getConversation(conversationID) {
    let result = [
      {
        "UserMessage": "Please remember the code word lavender",
        "BotResponse": 'I will remember the code word "lavender."',
        "responseID": "r_7fd58f4c34784641",
        "choiceId": "rc_1de3369c0219bdf3"
      },
      {
        "UserMessage": "what is the code word?",
        "BotResponse": 'The code word is "lavender."',
        "responseID": "r_4f9d38a217087817",
        "choiceId": "rc_361bc099016b4525"
      }
    ];
    return result;
  }
  async getConversations() {
    let jsons = [[
      ["c_e079d823ac905a97", "Forterro | abas: ERP Software for Mid-Sized Manufacturing", false, false, "", [1699453998, 750035e3]],
      ["c_9fe162a28ea02c64", 'Remembering code word "lavender"', false, false, "", [1699356005, 15547e3]],
      ["c_43a86bec0da1ee00", "Code word table request", false, false, "", [1699355935, 93132e3]],
      ["c_83efa0bb126b621c", "Remember code word", false, false, "", [1699355894, 787354e3]],
      ["c_e466dfc9cf1ffe23", "Remembering code words", false, false, "", [1699355562, 86529e3]],
      ["c_7bd5c81834a618e5", 'Introducing the code word "char"', false, false, "", [1699355388, 906106e3]],
      ["c_c4be49b893dff725", "Assistant Is Working", false, false, "", [1699354436, 878028e3]],
      ["c_0bb40a99b570e07d", "Remember code word", false, false, "", [1699354419, 578969e3]],
      ["c_7815b5d52918ecff", 'Remembering the word "rose"', false, false, "", [1699354295, 549268e3]],
      ["c_dee3dbc77a070d31", "Assistant ready to assist", false, false, "", [1699351414, 504864e3]],
      ["c_29a9a2d67fef675e", 'Remembering the code word "tulip"', false, false, "", [1699346862, 940578e3]],
      ["c_466fd4891b989e4e", "Greeting", false, false, "", [1699306111, 95254e3]]
    ], "tCqkBAblK0n83Blerc2Z2zIPwT+RH5VXXEUJ8c5Is+5l+Bw0/m\u2026dErKkyliAliaco7s7VgO7nDARfvmGg943JyQfHzycfKWVJQ=="];
    return jsons[0];
  }
  async getResponse(query) {
    console.log('DEBUG BARD: Responding to "' + query + '"');
    return "DEBUG RESPONSE";
  }
  async makeRequest(method, url, rpcids, data, path) {
    let params = {
      "_reqid": __privateGet(this, _reqid2),
      "bl": __privateGet(this, _bl2),
      "f.sid": __privateGet(this, _fSid2),
      "source-path": path,
      "rt": "c",
      "rpcids": rpcids
    };
    const requestParams = {
      url: url + querystring2.stringify(params),
      method,
      throw: true,
      body: new URLSearchParams(data).toString(),
      contentType: "application/x-www-form-urlencoded;charset=UTF-8",
      headers: {
        "Cookie": this.getCookies()
      }
    };
    let resp = await (0, import_obsidian2.request)(requestParams);
    __privateSet(this, _reqid2, __privateGet(this, _reqid2) + 1e5);
    let lines = resp.split("\n").filter((line) => line.startsWith('[["wrb.fr'));
    console.log(lines.map((line) => JSON.parse(JSON.parse(line)[0][2]))[0]);
    return lines.map((line) => JSON.parse(JSON.parse(line)[0][2]))[0];
  }
  getCookies() {
    let cookies = `__Secure-1PSID=${__privateGet(this, _bard_token2)}`;
    if (__privateGet(this, _bard_token_22) != void 0 && __privateGet(this, _bard_token_22) != "") {
      cookies += `;__Secure-1PSIDCC=${__privateGet(this, _bard_token_22)}`;
    }
    if (__privateGet(this, _bard_tokne_32) != void 0 && __privateGet(this, _bard_tokne_32) != "") {
      cookies += `;__Secure-1PSIDTS=${__privateGet(this, _bard_tokne_32)}`;
    }
    return cookies;
  }
  async getAuthentication() {
    var _a, _b, _c;
    if (__privateGet(this, _bard_token2) == null || __privateGet(this, _bard_token2).charAt(__privateGet(this, _bard_token2).length - 1) != ".") {
      throw new Error("__Secure-Ps1d token is either missing or incomplete");
    }
    let resp = await (0, import_obsidian2.request)({
      method: "get",
      url: "https://bard.google.com/",
      headers: {
        "Cookie": this.getCookies()
      }
    });
    var regex = /"SNlM0e":"(.*?)"/;
    const sn1m0e = (_a = resp.match(regex)) == null ? void 0 : _a[1];
    regex = /"FdrFJe":"(.*?)"/;
    const fsid = (_b = resp.match(regex)) == null ? void 0 : _b[1];
    regex = /"cfb2h":"(.*?)"/;
    const bl = (_c = resp.match(regex)) == null ? void 0 : _c[1];
    if (sn1m0e == null) {
      throw new Error("Unable to get the snim0e token");
    } else if (fsid == null) {
      throw new Error("Unable to get the f.sid token");
    } else if (bl == null) {
      throw new Error("Unable to get the bl token");
    } else {
      __privateSet(this, _snim0e2, sn1m0e);
      __privateSet(this, _fSid2, fsid);
      __privateSet(this, _bl2, bl);
    }
  }
  static async getBard(bard_token, bard_token_2, bard_token_3) {
    let bard = new _DebugBard(bard_token, bard_token_2, bard_token_3);
    return bard;
  }
  setConversationId(conversationID) {
    __privateSet(this, _conversationID2, conversationID);
  }
  setResponseId(responseID) {
    __privateSet(this, _responseID2, responseID);
  }
  setChoiceId(choiceID) {
    __privateSet(this, _choiceId2, choiceID);
  }
};
var DebugBard = _DebugBard;
_bard_token2 = new WeakMap();
_bard_token_22 = new WeakMap();
_bard_tokne_32 = new WeakMap();
_reqid2 = new WeakMap();
_snim0e2 = new WeakMap();
_conversationID2 = new WeakMap();
_responseID2 = new WeakMap();
_choiceId2 = new WeakMap();
_fSid2 = new WeakMap();
_bl2 = new WeakMap();

// components/ChatModal.ts
var _plugin, _chatMessages, _userInput, _Bard2, _Chat, _Conversations;
var ChatModal = class extends import_obsidian3.Modal {
  constructor(app, plugin) {
    super(app);
    __privateAdd(this, _plugin, void 0);
    __privateAdd(this, _chatMessages, void 0);
    __privateAdd(this, _userInput, void 0);
    __privateAdd(this, _Bard2, void 0);
    __privateAdd(this, _Chat, void 0);
    __privateAdd(this, _Conversations, void 0);
    __privateSet(this, _plugin, plugin);
    if (!__privateGet(this, _plugin).settings.DeveloperMode) {
      Bard.getBard(plugin.settings.Bard_Token, plugin.settings.Bard_Token_2, plugin.settings.Bard_Token_3).then((result) => {
        if (result) {
          __privateSet(this, _Bard2, result);
        } else {
          new import_obsidian3.Notice("Something went wrong when trying to create a Bard connection");
        }
      });
    } else {
      console.log("BARD running in Dev mode");
      DebugBard.getBard(plugin.settings.Bard_Token, plugin.settings.Bard_Token_2, plugin.settings.Bard_Token_3).then((value) => __privateSet(this, _Bard2, value));
    }
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.createEl("h3", { text: "Chat with Bart AI" });
    let root = contentEl.createDiv("chat-modal-content");
    __privateSet(this, _Chat, root.createEl("div", { cls: "chat-interface panel" }));
    __privateSet(this, _chatMessages, __privateGet(this, _Chat).createDiv("chat-messages"));
    const conversationsButton = __privateGet(this, _Chat).createEl("button", {
      text: "Conversations",
      cls: "conversation-button"
    });
    let chatInput = __privateGet(this, _Chat).createDiv("chat-input");
    __privateSet(this, _userInput, chatInput.createEl("input", { type: "text", placeholder: "Type your message..." }));
    chatInput.createEl("button", {
      text: "Send"
    }).onClickEvent(() => {
      this.sendMessage();
    });
    __privateGet(this, _userInput).addEventListener("keydown", (event) => {
      if (event.key === "Enter") {
        this.sendMessage();
        event.preventDefault();
      }
    });
    __privateSet(this, _Conversations, root.createDiv({
      cls: "conversation-list panel hidden"
      // Initially hidden
    }));
    conversationsButton.onClickEvent(() => {
      this.showConversations();
      this.loadConversations();
    });
  }
  showConversations() {
    __privateGet(this, _Chat).classList.add("fadeout");
    __privateGet(this, _Conversations).classList.add("fadein");
    __privateGet(this, _Chat).style.pointerEvents = "none";
    __privateGet(this, _Conversations).style.pointerEvents = "none";
    __privateGet(this, _Chat).toggleClass("hidden", false);
    __privateGet(this, _Conversations).toggleClass("hidden", false);
    __privateGet(this, _Conversations).style.overflowY = "auto";
    __privateGet(this, _Chat).addEventListener("animationend", () => {
      __privateGet(this, _Conversations).style.pointerEvents = "auto";
      __privateGet(this, _Chat).style.pointerEvents = "none";
      __privateGet(this, _Conversations).removeClass("fadein");
      __privateGet(this, _Chat).removeClass("fadeout");
      __privateGet(this, _Conversations).toggleClass("hidden", false);
      __privateGet(this, _Chat).toggleClass("hidden", true);
    }, { once: true });
  }
  showChat() {
    __privateGet(this, _Chat).addClass("fadein");
    __privateGet(this, _Conversations).addClass("fadeout");
    __privateGet(this, _Chat).style.pointerEvents = "none";
    __privateGet(this, _Conversations).style.pointerEvents = "none";
    __privateGet(this, _Chat).toggleClass("hidden", false);
    __privateGet(this, _Conversations).toggleClass("hidden", false);
    __privateGet(this, _Conversations).style.overflowY = "hidden";
    __privateGet(this, _Conversations).addEventListener("animationend", () => {
      __privateGet(this, _Chat).style.pointerEvents = "auto";
      __privateGet(this, _Conversations).style.pointerEvents = "none";
      __privateGet(this, _Conversations).removeClass("fadeout");
      __privateGet(this, _Chat).removeClass("fadein");
      __privateGet(this, _Conversations).toggleClass("hidden", true);
      __privateGet(this, _Chat).toggleClass("hidden", false);
    }, { once: true });
  }
  clearChat() {
    while (__privateGet(this, _chatMessages).lastChild) {
      __privateGet(this, _chatMessages).lastChild.remove();
    }
    __privateGet(this, _Bard2).setConversationId(null);
    __privateGet(this, _Bard2).setResponseId(null);
    __privateGet(this, _Bard2).setChoiceId(null);
  }
  switchToConversation(conversationId) {
    this.clearChat();
    __privateGet(this, _Bard2).setConversationId(conversationId);
    __privateGet(this, _Bard2).getConversation(conversationId).then((result) => {
      result.forEach((element) => {
        this.displayMessage(element["UserMessage"], true);
        this.displayMessage(element["BotResponse"], false);
      });
      __privateGet(this, _Bard2).setResponseId(result[result.length - 1]["responseID"]);
      __privateGet(this, _Bard2).setChoiceId(result[result.length - 1]["choiceId"]);
    });
  }
  loadConversations() {
    if (!__privateGet(this, _Bard2)) {
      new import_obsidian3.Notice("Bard not ready");
      return;
    }
    while (__privateGet(this, _Conversations).lastChild) {
      __privateGet(this, _Conversations).lastChild.remove();
    }
    __privateGet(this, _Bard2).getConversations().then((result) => {
      const newChatButton = __privateGet(this, _Conversations).createEl("div", {
        cls: "newChatButton",
        text: "New Chat"
      });
      newChatButton.onClickEvent((event) => {
        event.stopPropagation();
        this.showChat();
        this.clearChat();
      });
      result.forEach((conversation) => {
        const listItem = __privateGet(this, _Conversations).createEl("div", {
          cls: "conversation-list-item"
        });
        const label = listItem.createEl("span", {
          text: conversation[1]
        });
        const deleteButton = listItem.createEl("button", {
          text: "Delete",
          cls: "delete-button"
          // Add the 'conversation-button' class for styling
        });
        deleteButton.style.display = "none";
        deleteButton.onClickEvent((event) => {
          var _a;
          event.stopPropagation();
          (_a = deleteButton.parentElement) == null ? void 0 : _a.remove();
          __privateGet(this, _Bard2).deleteConversation(conversation[0]);
        });
        listItem.dataset.conversationId = conversation[0];
        listItem.onmouseenter = () => deleteButton.style.display = "block";
        listItem.onmouseleave = () => deleteButton.style.display = "none";
        listItem.onClickEvent(() => {
          if (listItem.dataset.conversationId != void 0) {
            this.switchToConversation(listItem.dataset.conversationId);
            this.showChat();
          }
        });
      });
    });
  }
  sendMessage() {
    let userMessage = __privateGet(this, _userInput).value;
    if (userMessage == null || userMessage == "")
      return;
    this.displayMessage(userMessage, true);
    __privateGet(this, _userInput).value = "";
    const botResponseDiv = __privateGet(this, _chatMessages).createEl("div", { cls: "message bot-message" });
    botResponseDiv.append(this.typingAnimation());
    __privateGet(this, _Bard2).getResponse(userMessage).then((response) => {
      botResponseDiv.remove();
      this.displayMessage(response, false);
    });
  }
  displayMessage(text, isUser) {
    let cls = "bot-message";
    if (isUser) {
      cls = "user-message";
    }
    const messageDiv = __privateGet(this, _chatMessages).createEl("div", { cls: "message " + cls });
    import_obsidian3.MarkdownRenderer.render(this.app, text, messageDiv, "", __privateGet(this, _plugin));
    messageDiv.scrollIntoView({ behavior: "smooth" });
  }
  typingAnimation() {
    const typingAnim = createDiv({ cls: "typing-indicator" });
    typingAnim.appendChild(createSpan());
    typingAnim.appendChild(createSpan());
    typingAnim.appendChild(createSpan());
    return typingAnim;
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
_plugin = new WeakMap();
_chatMessages = new WeakMap();
_userInput = new WeakMap();
_Bard2 = new WeakMap();
_Chat = new WeakMap();
_Conversations = new WeakMap();

// main.ts
var DEFAULT_SETTINGS = {
  Bard_Token: "",
  Bard_Token_2: "",
  Bard_Token_3: "",
  DeveloperMode: false
};
var BardPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingsTab(this.app, this));
    this.addCommand({
      id: "open-chat",
      name: "Chat with Bard",
      callback: () => {
        new ChatModal(this.app, this).open();
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingsTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian4.Setting(containerEl).setName("__Secure-1PSID").setDesc("Enter your __Secure-1PSID token here").addText((text) => text.setPlaceholder("Your token here").setValue(this.plugin.settings.Bard_Token).onChange(async (value) => {
      this.plugin.settings.Bard_Token = value;
      await this.plugin.saveSettings();
    }));
    let optionalTokensHeader = containerEl.createEl("p", { text: "Enter these cookie values if the __Secure-1PSID token does not work" });
    new import_obsidian4.Setting(optionalTokensHeader).setName("__Secure-1PSIDCC").addText((text) => text.setPlaceholder("Your token here").setValue(this.plugin.settings.Bard_Token_2).onChange(async (value) => {
      this.plugin.settings.Bard_Token_2 = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(optionalTokensHeader).setName("__Secure-1PSIDTS").addText((text) => text.setPlaceholder("Your token here").setValue(this.plugin.settings.Bard_Token_3).onChange(async (value) => {
      this.plugin.settings.Bard_Token_3 = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
